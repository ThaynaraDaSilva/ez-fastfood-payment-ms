name: Build, Test, and Push Docker Image

on:
  pull_request:
    branches: 
      - main

env:
  JAVA_VERSION: '17'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build with Maven
        run: mvn -f ./pom.xml clean package -Pprd

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run Unit Tests
        run: mvn test

      - name: Upload Test Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: target/surefire-reports

  sonar-analysis:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SonarQube Scan
        run: mvn clean verify sonar:sonar -Dsonar.token=${{ env.SONAR_TOKEN }}

      - name: ‚è≥ Aguardando processamento do SonarCloud
        run: sleep 10
      - name: üîç Verificando status do Quality Gate no SonarQube
        run: |
          response=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}")
          status=$(echo "$response" | jq -r '.projectStatus.status')
          
          echo "üö¶ Status do Quality Gate: $status"
          
          if [[ "$status" != "OK" ]]; then
            echo "‚ùå O Quality Gate falhou!"
            exit 1
          fi
      - name: ‚úÖ Pipeline finalizado com sucesso
        run: echo "üéâ Tudo certo! O Quality Gate foi aprovado."

  build-and-push-image:
    needs: sonar-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: dasilvathaynara/ez-fastfood-payment-ms:latest

  # deploy:
  #   needs: build-and-push-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #
  #     - name: Install kubectl
  #       run: |
  #         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #         chmod +x kubectl
  #         sudo mv kubectl /usr/local/bin/
  #
  #     - name: Update kubeconfig for EKS
  #       run: aws eks update-kubeconfig --region us-east-1 --name ez-fastfood-cluster-dev
  #
  #     - name: Apply Kubernetes manifests
  #       run: |
  #         kubectl apply -f k8s/api-deployment.yaml --validate=false
  #         kubectl apply -f k8s/api-service.yaml
  #         kubectl apply -f k8s/api-configmap.yaml
  #         kubectl apply -f k8s/ezfastfood-secrets.yaml
